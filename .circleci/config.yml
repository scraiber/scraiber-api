version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: scraiber/scraiber-api
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    executor: docker-publisher
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest ./src
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  test:
    machine:  # Use a Linux VM instead of docker environment
      image: circleci/classic:201808-01
    working_directory: ~/repo # Default working directory, where your project will be cloned
    steps:
      - checkout
      - run:
          name: Run tests
          command: sh tests/tests.ci.sh
    environment:
      - CLUSTER_DICT: '{"US1": "CLUSTER_LINK_US1", "EU1": "CLUSTER_LINK_EU1"}'
      - TEST_PORT: 8000
      - TEST_HOST: web
      - SCRAIBER_API_SECRET: SECRET
      - DB_HOST: db
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  test_old:
    executor: docker-publisher
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Run tests
          command: sh tests/tests.ci.sh
    environment:
      - CLUSTER_DICT: '{"US1": "CLUSTER_LINK_US1", "EU1": "CLUSTER_LINK_EU1"}'
      - TEST_PORT: 8000
      - TEST_HOST: web
      - SCRAIBER_API_SECRET: SECRET
      - DB_HOST: db
  kubernetes_test:
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Install KinD
          command: |
            sudo apt-get update && sudo apt-get install -y ca-certificates
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/
      - setup_remote_docker
      - run:
          name: Create Kubernetes Cluster
          command: |
            kind create cluster
      - run:
          name: Install kubectl
          command: |
            curl -Lo kubectl https://dl.k8s.io/release/v1.23.1/bin/linux/amd64/kubectl
            chmod +x kubectl
            mkdir -p ~/.local/bin/kubectl
            mv ./kubectl /usr/local/bin/
      - run:
          name: Run Tests
          command: |
            export KUBECONFIG="$(kind get kubeconfig-path)"
            kubectl cluster-info
            kubectl get pods --all-namespaces
workflows:
  build-main:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - test:
          requires:
            - build
          filters:
            branches:
              only: main
      - publish-latest:
          requires:
            - build
            - test
          filters:
            branches:
              only: main
  build-tags:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-tag:
          requires:
            - build
            - test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
